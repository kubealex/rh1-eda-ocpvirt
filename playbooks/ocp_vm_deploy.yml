- name: OCP | Deploy VM from template
  hosts: localhost
  module_defaults:
    group/redhat.openshift.openshift:
      host: "{{ ocp_api_url | default(lookup('env', 'K8S_AUTH_HOST'), true) }}"
      username: "{{ ocp_admin_username | default(lookup('env', 'K8S_AUTH_USERNAME'), true) }}"
      password: "{{ ocp_admin_password | default(lookup('env', 'K8S_AUTH_PASSWORD'), true) }}"
      validate_certs: "{{ ocp_api_verify_tls | default(false, true) }}"
  vars:
    vm_name: "{{ ocp_vm_name | default('rhel9-vm', true) }}"
    vm_namespace: "{{ ocp_vm_namespace | default('rh1-demo', true) }}"
    vm_template: "{{ ocp_vm_template | default('rhel9-server', true) }}"
    vm_cpu_count: "{{ ocp_vm_cpu | default(2, true) }}"
    vm_mem_count: "{{ ocp_vm_mem | default('4Gi', true) }}"
    vm_flavour: "{{ ocp_vm_flavour | default('RHEL', true) }}"
    vm_image_url: "{{ ocp_rhel_image }}"
  tasks:
    - name: OCP | Set image source
      ansible.builtin.set_fact:
        vm_image_source: "{{ 'rhel9-base' if vm_template == 'rhel9-server' else 'win2k19-base' }}"
    - name: OCP | Login to OCP cluster
      block:
        - name: OCP | Login into OpenShift Container Platform cluster
          redhat.openshift.openshift_auth:
          register: _openshift_auth_results

        - name: Retrieving OCP api_key
          ansible.builtin.set_fact:
            ocp_api_key: "{{ _openshift_auth_results.openshift_auth.api_key }}"

    - name: RH1 Demo | Create a VirtualMachine
      redhat.openshift_virtualization.kubevirt_vm:
        host: "{{ ocp_api_url | default(lookup('env', 'K8S_AUTH_HOST'), true) }}"
        validate_certs: "{{ ocp_api_verify_tls | default(false, true) }}"
        api_key: "{{ ocp_api_key }}"
        state: present
        name: "{{ vm_name }}"
        namespace: "{{ vm_namespace }}"
        data_volume_templates:
          - metadata:
              name: "{{ vm_name }}"
            spec:
              sourceRef:
                kind: DataSource
                name: "rhel9-insights"
                namespace: rh1-demo
              storage:
                resources: {}
          - metadata:
              name: "{{ vm_name }}-additional-disk"
            spec:
              storage:
                resources:
                  requests:
                    storage: "5Gi"
              preallocation: false
              source:
                blank: {}
        spec:
          domain:
            cpu:
              cores: "{{ vm_cpu_count | int }}"
              sockets: 1
              threads: 1
            resources:
              requests:
                memory: "{{ vm_mem_count }}"
            devices:
              disks:
                - name: "rootdisk"
                  disk:
                    bus: "virtio"
                  bootOrder: 1
                - disk:
                    bus: "virtio"
                  name: "cloudinitdisk"
                  bootOrder: 2
                - name: "additional-disk"
                  disk:
                    bus: "virtio"
              interfaces:
                - name: "bridged-network"
                  model: "virtio"
                  bridge: {}
                - masquerade: {}
                  model: "virtio"
                  name: "default"
              firmware:
                bootloader:
                  efi: {}
              machine:
                type: "pc-q35-rhel9.2.0"
          networks:
            - name: "bridged-network"
              multus:
                networkName: "{{ vm_namespace }}/br1"
            - name: "default"
              pod: {}
          volumes:
            - dataVolume:
                name: "{{ vm_name }}"
              name: "rootdisk"
            - name: "additional-disk"
              dataVolume:
                name: "{{ vm_name }}-additional-disk"
            - name: "cloudinitdisk"
              cloudInitNoCloud:
                userData: |
                  #cloud-config
                  preserve_hostname: true
                  ssh_pwauth: true
                  user: sysadmin
                  password: redhat
                  chpasswd:
                    expire: false
                  users:
                    - name: sysadmin
                      plain_text_passwd: redhat
                      lock_passwd: false
                      sudo: ALL=(ALL) NOPASSWD:ALL
                  disk_setup:
                    /dev/vdc:
                      table_type: 'mbr'
                      layout: [100]
                      overwrite: True
                  fs_setup:
                    - filesystem: 'ext4'
                      device: '/dev/vdc1'
                  write_files:
                    - path: /tmp/send_webhook.sh
                      content: |
                        #!/bin/bash
                        curl -X POST -d '{"source": "ocpvirt", "instanceName": "'$(hostname -f)'" }' {{ ocp_webhook_url }}
                      permissions: '0755'
                  mounts:
                    - [ /dev/vdc1, /myfilesystem ]
                  runcmd:
                    - hostnamectl set-hostname $(hostname -f)
                    - /bin/bash /tmp/send_webhook.sh
                    - systemctl restart NetworkManager
                networkData: |
                  version: 2
                  ethernets:
                    eth1:
                      routes:
                        - to: 10.0.0.0/8
                          via: 10.0.2.1
                      dhcp4: true
